{"/home/travis/build/npmtest/node-npmtest-gulp-html-inline/test.js":"/* istanbul instrument in package npmtest_gulp_html_inline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html-inline/lib.npmtest_gulp_html_inline.js":"/* istanbul instrument in package npmtest_gulp_html_inline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_html_inline = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_html_inline = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html-inline/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-html-inline && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_html_inline */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_html_inline\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_html_inline.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_gulp_html_inline.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_html_inline.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_gulp_html_inline.__dirname +\n                    '/lib.npmtest_gulp_html_inline.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-html-inline/node_modules/gulp-html-inline/index.js":"/**\r\n * Created by Rodey on 2015/11/5.\r\n */\r\n\r\nvar fs          = require('fs'),\r\n    path        = require('path'),\r\n    through2    = require('through2'),\r\n    uglifycss   = require('uglifycss'),\r\n    jsmin       = require('jsmin2'),\r\n    crypto      = require('crypto'),\r\n    url         = require('url'),\r\n    PluginError = require('gulp-util').PluginError;\r\n\r\nvar PLUGIN_NAME = 'gulp-html-inline';\r\n\r\nvar linkRegx    = new RegExp('<link\\\\s+[\\\\s\\\\S]*?>[\\\\s\\\\S]*?<*\\\\/*>*', 'gi'),\r\n    hrefRegx    = new RegExp('\\\\s*(href)=\"+([\\\\s\\\\S]*?)\"'),\r\n    styleRegx   = new RegExp('<style\\\\s*[\\\\s\\\\S]*?>[\\\\s\\\\S]*?<\\\\/style>', 'gi'),\r\n    jsRegx      = new RegExp('<script\\\\s+[\\\\s\\\\S]*?>[\\\\s\\\\S]*?<\\\\/script>', 'gi'),\r\n    scriptRegx  = new RegExp('<script\\\\s*(^|src)*?>[\\\\s\\\\S]*?<\\\\/script>', 'gi'),\r\n    srcRegx     = new RegExp('\\\\s*(src)=\"+([\\\\s\\\\S]*?)\"');\r\n\r\nvar joint = function(tag, content, attrstr){\r\n    return '<'+ tag + attrstr +'>' + content + '</'+ tag +'>';\r\n};\r\n\r\nvar isLocal = function(href){\r\n    return href && href.slice(0, 2) !== '//' && !url.parse(href).hostname;\r\n};\r\n\r\n//压缩内联css代码 | js脚本\r\nvar miniInline = function(content, type, options){\r\n    var isMinifyJs  = options.minifyJs,\r\n        code        = content;\r\n\r\n    if('css' === type){\r\n        code = uglifycss.processString(content, options);\r\n    }\r\n    else if('js' === type){\r\n        if(!isMinifyJs) return content;\r\n        code = jsmin(content, options).code.replace(/(\\n|\\t)*/gi, '');\r\n    }\r\n    return code;\r\n};\r\n\r\n//replace callback src | href\r\nvar replaceCallback = function(sourceRegx, match, parentFile, type, options){\r\n\r\n    var ms = sourceRegx.exec(match),\r\n        code = '',\r\n        content = '',\r\n        attrString = ' charset=\"utf-8\" ',\r\n        isMinifyJs  = options.minifyJs,\r\n        basePath    = options.basePath,\r\n        tohashRegx   = options.tohashRegx;\r\n\r\n    if(!ms || !ms[2] || '' === ms[2]){\r\n        return miniInline(match, type, options);\r\n    }\r\n    var href = ms[2] || '';\r\n\r\n    if(!isLocal(href))      return href;\r\n    if(/^\\?/i.test(href))   return '';\r\n\r\n    //在url地址上加上 _toInline 字段就可以直接嵌入网页\r\n    //如果href上面不存在 _toInline 字符或者options中指定的toInlne字符\r\n    if(href.search(options.toinlineRegx) === -1){\r\n\r\n        var hash = '';\r\n        //如果存在 _toHash 字符\r\n        if(href.search(tohashRegx) !== -1){\r\n            content = _getContents();\r\n            if(content != null){\r\n                hash = getFileHash(content, 8);\r\n            }else{\r\n                hash = getFileHash(Date.now() + '_' + Math.random() * 100000, 8);\r\n            }\r\n            return match.replace(tohashRegx, function(mh, $1){\r\n                return $1 + options.queryKey +'=' + hash;\r\n            });\r\n        }\r\n        return match;\r\n    }\r\n\r\n    content = _getContents();\r\n    if(content == null) return match;\r\n\r\n    if('css' === type){\r\n        code = uglifycss.processString(content, options);\r\n        code = joint('style', code, attrString + 'type=\"text/css\"');\r\n    }\r\n    else if('js' === type){\r\n        if(!isMinifyJs)\r\n            return joint('script', '\\n\\t' + content + '\\n\\t', attrString + 'type=\"text/javascript\" defer');\r\n        code = jsmin(content, options).code.replace(/(\\n|\\t)*/gi, '');\r\n        code = joint('script', code, attrString + 'type=\"text/javascript\" defer');\r\n    }\r\n\r\n    return code;\r\n\r\n    function _getContents(){\r\n        var tempFilePath;\r\n        if(basePath && '' !== basePath){\r\n            tempFilePath = path.resolve(basePath, href);\r\n        }else{\r\n            tempFilePath = path.resolve(path.dirname(parentFile), href);\r\n        }\r\n        tempFilePath = tempFilePath.replace(/\\?[^\\?]*/gi, '');\r\n        return getFileContent(tempFilePath);\r\n    }\r\n};\r\n\r\n//根据标签类型获取内容并压缩\r\nvar execture = function(file, options){\r\n\r\n    var parentFile = path.normalize(file.path);\r\n    var fileContents = file.contents.toString('utf8');\r\n    if(typeof fileContents === 'undefined'){\r\n        fileContents = getFileContent(file.path);\r\n    }\r\n\r\n    //获取单个标签的替换内容（已压缩）\r\n    var content = fileContents\r\n        .replace(styleRegx, function($1){\r\n\r\n            //like:\r\n            // <style ignore>\r\n            //  #app{\r\n            //      width: 80%;\r\n            //      padding: 10px;\r\n            //  }\r\n            // </style>\r\n            //console.log($1);\r\n            return miniInline($1, 'css', options);\r\n\r\n        }).replace(scriptRegx, function($1){\r\n            //like:\r\n            // <script ignore>\r\n            //      var a = 0,\r\n            //          b = 0;\r\n            //      var arr = [];\r\n            //      arr.push(a);\r\n            //      arr.push(b);\r\n            // </script>\r\n            //console.log($1);\r\n            return miniInline($1, 'js', options);\r\n        }).replace(linkRegx, function($1){\r\n\r\n            //like: <link rel=\"stylesheet\" href=\"assets/css/a.css\" />\r\n            return replaceCallback(hrefRegx, $1, parentFile, 'css', options);\r\n\r\n        }).replace(jsRegx, function($1){\r\n\r\n            //like: <script src=\"assets/js/a.js\"></script>\r\n            //console.log($1);\r\n            return replaceCallback(srcRegx, $1, parentFile, 'js', options);\r\n\r\n        });\r\n\r\n    return content;\r\n};\r\n\r\n//获取文件内容\r\nvar getFileContent = function(file){\r\n    if(!fs.existsSync(file)) return null;\r\n    return fs.readFileSync(file, { encoding: 'utf8' });\r\n    //file.contents = new Buffer(uglifycss.processString(fileContent, options));\r\n};\r\n\r\nvar resetOptions = function(options){\r\n    options['basePath']     = options['basePath'] || '';\r\n    options['queryKey']     = options['queryKey'] || '_rvc';\r\n    options['toInline']     = options['toInline'] || '_toInline';\r\n    options['toHash']       = options['toHash'] || '_toHash';\r\n    options['hashSize']     = options['hashSize'] || 8;\r\n    options['toinlineRegx'] = new RegExp('(\\\\?|\\\\&)+' + options['toInline'], 'gi');\r\n    options['tohashRegx']   = new RegExp('(\\\\?|\\\\&)+' + options['toHash'], 'gi');\r\n    return options;\r\n};\r\n\r\n//获取压缩后的内容\r\nvar getContent = function(file, options){\r\n    return execture(file, resetOptions(options));\r\n};\r\n\r\n//获取文件hash值\r\nvar getFileHash = function(fileContent, size){\r\n    var fileHash = crypto.createHash('md5').update(fileContent).digest('hex').slice(0, size || 10);\r\n    return fileHash;\r\n};\r\n\r\n//将压缩后的内容替换到html中\r\nvar inline = function(options){\r\n    options = options || {};\r\n    return through2.obj(function(file, enc, next){\r\n\r\n        if (file.isStream()) {\r\n            this.emit('error', new PluginError(PLUGIN_NAME, 'Stream content is not supported'));\r\n            return next(null, file);\r\n        }\r\n        if (file.isBuffer()) {\r\n            try {\r\n                var content = getContent(file, options);\r\n                //console.log(content);\r\n                file.contents = new Buffer(content);\r\n            }\r\n            catch (err) {\r\n                this.emit('error', new PluginError(PLUGIN_NAME, ''));\r\n            }\r\n        }\r\n        this.push(file);\r\n        return next();\r\n\r\n\r\n    });\r\n\r\n};\r\n\r\nmodule.exports = inline;"}